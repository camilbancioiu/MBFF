#!/usr/bin/python3

from argparse import ArgumentParser
import exds_operations
import utilities as util
import itertools
import definitions as Definitions

operations = ['list', 'build', 'rebuild', 'resave', 'delete', 'lock', 'unlock', 'stats', 'build-ks-gamma', 'custom']

def create_argument_parser():
    parser = ArgumentParser()

    parser.add_argument(
            'operation', 
            help='The operation to be performed on the targets.',
            choices=operations)
    parser.add_argument(
            'targets', type=str, nargs='+',
            help='The targets of the operation.')

    parser.add_argument('-n', '--parallelism', type=int)
    parser.add_argument('--build-ks-gamma-optimization', type=str)
    parser.add_argument('--build-ks-gamma-table-for-target', type=int)

    target_type = parser.add_mutually_exclusive_group()
    target_type.add_argument(
            '-e', '--as_names', 
            help='Indicates that the targets are ExDs names.',
            action='store_const', dest='targets_type', const='names')
    target_type.add_argument(
            '-el', '--as_exds_lists', 
            help='Indicates that the targets are the ExDs from the specified ExDs lists.',
            action='store_const', dest='targets_type', const='exds_lists')
    target_type.add_argument(
            '-elf', '--as_exds_list_files', 
            help='Indicates that the targets are the ExDs from the specified exdslist files.',
            action='store_const', dest='targets_type', const='exds_list_files')
    target_type.add_argument(
            '-et', '--as_exds_tags', 
            help='Indicates that the targets are the ExDs with the given tags.',
            action='store_const', dest='targets_type', const='exds_tags')

    lock_type = parser.add_mutually_exclusive_group()
    lock_type.add_argument('--lock-exds', action='store_const', dest='lock_type', const='exds')
    lock_type.add_argument('--lock-ks-gamma', action='store_const', dest='lock_type', const='ks_gamma')

    stats_action = parser.add_mutually_exclusive_group()
    stats_action.add_argument(
            '-p', '--print',
            help='Print stats.',
            action='store_const', dest='stats_action', const='print')
    stats_action.add_argument(
            '-r', '--regenerate',
            help='Load the ExDs, recalculate stats and resave them to their own folders.',
            action='store_const', dest='stats_action', const='regenerate')
    stats_action.add_argument(
            '-c', '--print-to-csv',
            help='Load ExDs stats and convert them to CSV.',
            action='store_const', dest='stats_action', const='print_to_csv')

    parser.set_defaults(
            operation='list',
            targets=['all'],
            targets_type='names',
            lock_type='exds',
            stats_action='print',
            parallelism=1,
            build_ks_gamma_optimization='full_sharing',
            build_ks_gamma_table_for_target=-1
            )
    return parser

def get_exds_names_from_arguments(arguments):
    exds_names = []
    if arguments.targets_type == 'names':
        exds_names = arguments.targets
    elif arguments.targets_type == 'exds_lists':
        raise NotImplementedError('Not yet supported: exds lists without files')
    elif arguments.targets_type == 'exds_list_files':
        exds_names = []
        for listid in arguments.targets:
            exds_names_in_file = util.load_list_from_file('exdslist', listid)
            exds_names = itertools.chain(exds_names, exds_names_in_file)
    elif arguments.targets_type == 'exds_tags':
        exds_names = []
        for tag in arguments.targets:
            exds_names_by_tag = Definitions.get_definition_names_by_tag(Definitions.ExperimentalDatasets, tag)
            exds_names = itertools.chain(exds_names, exds_names_by_tag)
    return sorted(exds_names)

if __name__ == '__main__':
    parser = create_argument_parser()
    arguments = parser.parse_args()

    op = arguments.operation
    exds_operations.arguments = arguments
    exds_operations.parallelism = arguments.parallelism
    exds_names = get_exds_names_from_arguments(arguments)

    if op == 'list':
        exds_operations.op_list(exds_names)
    elif op == 'build':
        exds_operations.op_build(exds_names)
    elif op == 'rebuild':
        exds_operations.op_rebuild(exds_names)
    elif op == 'resave':
        exds_operations.op_resave(exds_names)
    elif op == 'delete':
        exds_operations.op_delete(exds_names)
    elif op == 'lock':
        exds_operations.op_lock(exds_names)
    elif op == 'unlock':
        exds_operations.op_unlock(exds_names)
    elif op == 'stats':
        if arguments.stats_action == 'print':
            exds_operations.op_stats_print(exds_names)
        elif arguments.stats_action == 'regenerate':
            exds_operations.op_stats_regenerate(exds_names)
        elif arguments.stats_action == 'print_to_csv':
            exds_operations.op_stats_print_to_csv(exds_names)
        else:
            raise Exception('Unkown action for stats.')
    elif op == 'build-ks-gamma':
        exds_operations.op_build_ks_gamma(exds_names)
    elif op == 'custom':
        exds_operations.op_custom(exds_names, arguments)
    else:
        raise Exception('Operation not recognised: {}'.format(op))

